The core architectural difference between Linux and Windows:
- Linux is a file-oriented operating system, while
- Windows is API oriented, and though APIs can provide a much reacher set of capabilities, they come at the expense of simplicity. 

PowerShell is an API-oriented command line interface and scripting tool. 

[Setting Up A Powershell Testing Environment]

[[Script Execution Policy]]
- Which determines what types of scripts PowerShell can execute. For example, we can check the current setting for the execution policy as follows:
PS C:\> Get-ExecutionPolicy
Restricted

- The restricted blocks all scripts from running unless they are signed with a trusted certificate. 
- As the scripts in this book are unsigned, we'll change the execution policy to RemoteSigned. This execution policy allows us to run unsigned PowerShell scripts if they're created locally
but will not allow us to execute unsigned scripts downloaded in a web browser or attached to emails. 

- Run the following command to set the execution policy: 
PS C:\> Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -Force
PS C:\> Get-ExecutionPolicy
RemoteSigned
- The above command changes the execution policy for the current user only, not the entire system. If you want to change it for all users, 
you'll need to start PowerShell as an administrator and then rerun the command, removing the Scope parameter. 
PS C:\> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Force

- If you're using the open source version of PowerShell or version 5.1 on Windows Server, 
then the default script execution policy is RemoteSigned and you donot have to change anything. Here are the commands to query PowerShell version 
PS C:\> GET-Host

Name             : ConsoleHost
Version          : 5.1.26100.2161
InstanceId       : ff2c5f33-f377-4199-87ec-09a191edfb00
UI               : System.Management.Automation.Internal.Host.InternalHostUserInterface
CurrentCulture   : en-US
CurrentUICulture : en-US
PrivateData      : Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy
DebuggerEnabled  : True
IsRunspacePushed : False
Runspace         : System.Management.Automation.Runspaces.LocalRunspace


PS C:\> GET-Host | Select-Object Version

Version
-------
5.1.26100.2161

PS C:\> $PSVersionTable

Name                           Value
----                           -----
PSVersion                      5.1.26100.2161
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.26100.2161
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1

- Now that we can run unsigned scripts, we can install the PowerShell module we'll be using for this book. 
- A PowerShell module is a package of scripts and .NET binaries that export PowerShell commands. 
Every installation of PowerShell comes preinstalled with several modules for tasks ranging from configuring your applications to setting up Windows Update. 
You can install a module manually by copying its files, but the easier approach is to use the PowerShell Gallery (https://www.powershellgallery.com), an online repository of modules.

[[Install A PowerShell Module]]
- To install a module from the PowerShell Gallery, we use PowerShell's Install-Module command. 
For this book, we'll need to install the NtObjectManager module, which we can do using the following command:

PS C:\> Install-Module NtObjectManager -Scope CurrentUser -Force

NuGet provider is required to continue
PowerShellGet requires NuGet provider version '2.8.5.201' or newer to interact with NuGet-based repositories. The
NuGet provider must be available in 'C:\Program Files (x86)\PackageManagement\ProviderAssemblies' or
'C:\<>\AppData\Local\PackageManagement\ProviderAssemblies'. You can also install the NuGet provider by
running 'Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force'. Do you want PowerShellGet to install
and import the NuGet provider now?
[Y] Yes  [N] No  [S] Suspend  [?] Help (default is "Y"):

Press "Y".

- If you have the module installed already, you can ensure that you have the latest version by using the Update-Module commands:

PS C:\> Update-Module NtObjectManager

- Once it's installed, you can load the module using the Import-Module command:

PS C:\> Import-Module NtObjectManager
PS C:\> New-NtObjectDescriptor
New-NtObjectDescriptor : The term 'New-NtObjectDescriptor' is not recognized as the name of a cmdlet, function,
script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is
correct and try again.
At line:1 char:1
+ New-NtObjectDescriptor
+ ~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (New-NtObjectDescriptor:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\> New-NtSecurityDescriptor

Owner DACL ACE Count SACL ACE Count Integrity Level
----- -------------- -------------- ---------------
NONE  NONE           NONE           NONE

[[An Overview of the PowerShell Language]]

[[[Understanding Types, Variables, and Expressions]]]

- PowerShell supports many different data types, from basic integers and strings to complex objects. The following shows some of the most common built-in types:
Type            .Net type                    Examples
int             System.Int32                142, 0x8E, 0216
long            System.Int64                142L, 0x8EL, 0216L
string          System.String                "Hello", 'World!'
double          System.Double                1.0, 1e10
bool            System.Boolean               $true, $false
array           System.Object[]              @(1, "ABC", $true)
hashtable       System.Collections.Hashtable    @{A=1; B="ABC"}

- To perform calculations on basic types, we can use well-known operators such as +, -, *, and /. These operators can be overloaded; 
for example, + is used for addition as well as for concatenating strings and arrays. 
- The following provides a list of common operators, with simple examples and their results.
Operator        Name                        Examples                        Results
+               Addition or concatenation   1 + 2, "Hello" + "World!"       3, "HelloWorld!"
-               Subtraction                 2 - 1                           1
*               Multiplication              2 * 4                           8
/               Division                    8 / 4                           2
%               Modulus                     6 % 4                           2
[]              Index                       @(3, 2, 1, 0)[1]                2
-f              String formatter            "0x{0:X} {1}" -f 42, 123        "0x2A 123"
-band           Bitwise AND                 0x1FF -band 0xFF                255
-bor            Bitwise OR                  0x100 -bor 0x20                 288
-bxor           Bitwise XOR                 0xCC -bxor 0xDD                 17
-bnot           Bitwise NOT                 -bnot 0xEE                      -239
-and            Boolean AND                 $true -and $false                $false
-or             Boolean OR                  $true -or $false                 $true
-not            Boolean NOT                 -not $ture                       $false
-eq             Equals                      "Hello" -eq "Hello"              $true
-ne             Not equals                  "Hello" -ne "Hello"              $false
-lt             Less than                    4 -lt 10                        $true
-gt             Greater than                 4 -gt 10                        $false

- You can assign values to variables using the assignment operator, =. E.g., $x = 45. A variable has an alphanumeric name prefixed with the $ character. 
For example, the following example shows how you can capture an array in a variable and use the indexing operator to look up a value. 
- PS> $var = 3, 2, 1, 0
- PS> $var[1] 
  2

- There are also some predefined variables we'll ise in the rest of this book. These variables are:
$null => Represents the NULL value, which indicates the absence of a value in comparisons 
$pwd => Contains the current working directory 
$pid => Contains the process ID of the shell 
$env => Accesses the process environment (for example, $env:WinDir to get the Windows directory)

- You can enumerate all variables using the Get-Variable command. 

- In the above data types section, you might have noticed that there were two string examples, one using double quotation marks and one using single quotation marks. 
- One difference between the two is that a double-quoted string support STRING INTERPOLATION, where you insert a variable name into the string as a placeholder and PowerShell includes its value in the result. 
- Example 
PS> $var = 42
PS> "The magic number is $var"
The magic number is 42

PS>'It is not $var'
It is not $var

- First, we define a variable with the value 42 to insert into a string. Then we create a double-quoted string with the variable name inside it. The result is the string with the variable name replaced by its value formatted as a string. 
- If you want more control over the formatting, you can use the string formatter operator -f.
- To demonstrate the difference behavior of a single-quoted string, we define one of these with the variable name inline.
We can observe that in this case the variable name is copied verbatim and is not replaced by the value.
- Another difference is that a double-quoted string can contain character escapes that are ignored in single-quoted strings. 
These escapes use a similar syntax to those of the C programming language, but instead of a backslash character (\) 
PowerShell used the backtick(`). This is because Windows uses the backslash as a path separator, and writing out filepaths 
would be very annoying if you had to escape every backslash. 

Table 1-3: String Character Escapes
===================================
Character escape                Name
`0                            NUL character, with a value of zero
`a                            Bell
`b                            Backspace
`n                            Line feed
`r                            Carriage return 
`t                            Horizontal tab
`v                            Vertical tab 
``                            Backtick character 
`"                            Double quote character 

- If you want to insert a double quote character into a double-quoted string, you'll need to use the `" escape. 
- To insert a single quote into a single-quoted string, you double the quote character: for example, 'Hello''There' would convert to Hello'There. 

Note also the mention of a NUL character in this table. As PowerShell uses the .NET string type, it can contain embedded NUL characters. Unlike in the C language, 
adding a NUL will not terminate the string prematurely. 

- Because all values are .NET types, we can invoke methods and access properties on an object. 
For example, the following calls the ToCharArray method on a string to convert it to an array of single characters. 
--------------
PS C:\Users\Null> "Hello".TocharArray()
H
e
l
l
o
----------------
- We can use PowerShell to construct almost any .NET type. The simplest way to do this is to case a value to that type by specifying the .NET type in 
square brackets. When casting, PowerShell will try to find a suitable constructor for the type to invoke. 

For example, the following command will convert a string to a System.Guid object; PowerShell will find a constructor that accepts a string and call it:
---------------------
PS C:\Users\Null> [System.GUID]"ffffffff-ffff-ffff-ffff-ffffffffffff"

Guid
----
ffffffff-ffff-ffff-ffff-ffffffffffff

PS C:\Users\Null> [System.Guid]::new("ffffffff-ffff-ffff-ffff-ffffffffffff")

Guid
----
ffffffff-ffff-ffff-ffff-ffffffffffff
----------------------

This syntax can also be used to invoke static methods on the type. 
For example, the following calls the NewGuid static method to create a new random globally unique identifier (GUID):
------------------
PS C:\Users\Null> [System.Guid]::newGuid()

Guid
----
ec6770f0-a99e-472a-9da2-cec43aa16f84


PS C:\Users\Null> [System.Guid]::newGuid()

Guid
----
179f365e-0941-4f13-b50c-68df969552c8
------------------
- You can create new objects too, using the New-Object command:
-----------------
PS C:\Users\Null> New-Object -TypeName Guid -ArgumentList "ffffffff-ffff-ffff-ffff-ffffffffffff"

Guid
----
ffffffff-ffff-ffff-ffff-ffffffffffff
------------------

[Executing Commands]
- Almost all commands in PowerShell are named using a common patter: a verb and a noun, separated by a dash. 
For example, consider the command Get-Item. The Get verb implies retrieving an existing resource, while Item is the type of resource to return. 
- Each command can accept a list of parameters that controls the behavior of the command. 
For example, the Get-Item command accepts a Path parameter that indicates the exisitng resource to retrieve, as shown here:
--------------
PS C:\Users\Null> GEt-Item -Path "C:\Windows"


    Directory: C:\


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----         2/11/2025  11:20 AM                Windows
----------------

- The Path parameter is a positional parameter. This means that you can omit the name of the parameter, and the PowerShell will do its best to select 
the best match. So the previous command can also be written as the following:
-------------
PS C:\Users\Null> Get-Item "C:\Windows"


    Directory: C:\


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----         2/11/2025  11:20 AM                Windows

--------------------

- If a parameter takes a string value, and the string does not contain any special characters or whitepsace, then you do not need to use 
quotes around the string. For example, the Get-Item command would also work with the following:
---------------------------
PS C:\Users\Null> Get-Item c:\Windows


    Directory: C:\


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----         2/11/2025  11:20 AM                Windows
--------------------------

- The output of a single command is zero or more values, which can be basic or complex object types. 
You can pass the output of one command to another as input using a pipeline, which is represented by
a vertical bar character, |. 

- You can capture the result of an entire command or pipeline into a variable, then interact with the results. 
For example, the following captures the result of the Get-Item command and queries for the FullName property:
-----------
PS C:\Users\Null> $var = Get-Item -Path "C:\Windows"
PS C:\Users\Null> $var.FullName
C:\Windows
-------------
- If you don't want to capture the result in a variable, you can enclose the command in parentheses and 
directly access its properties and methods:
-------------
PS C:\Users\Null> (Get-Item -Path "C:\Windows").FullName
C:\Windows
-------------
- The length of a command line is effectively infinite. However, you'll want to try to split up long lines to make the 
commands more readable. The shell will automatically split a line on the pipe character. If you need to split a long 
line with no pipes, you can use the backtick (`) character, then start a new line. The backtick must be the last character on the 
line; otherwise, an error will occur when the script is parsed.
----------------
PS C:\Users\Null> GEt-item `
>> C:\Windows


    Directory: C:\


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----         2/11/2025  11:20 AM                Windows
-----------------------------------

[Discovering Commands and Getting Help]
- A default installation of PowerShell has hundreds of commands to choose from. This means that finding a command to perform a specific task can be 
difficult, and even if you find the command, it might not be clear how to use it.
For example, Get-Alias is the useful command to find common commands.
-------------------------------
PS C:\Users\Null> Get-Alias

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Alias           % -> ForEach-Object
Alias           ? -> Where-Object
Alias           ac -> Add-Content
Alias           asnp -> Add-PSSnapin
Alias           cat -> Get-Content
Alias           cd -> Set-Location
Alias           CFS -> ConvertFrom-String                          3.1.0.0    Microsoft.PowerShell.Utility
Alias           chdir -> Set-Location
Alias           clc -> Clear-Content
Alias           clear -> Clear-Host
Alias           clhy -> Clear-History
Alias           cli -> Clear-Item
Alias           clp -> Clear-ItemProperty
Alias           cls -> Clear-Host
Alias           clv -> Clear-Variable
Alias           cnsn -> Connect-PSSession
Alias           compare -> Compare-Object
Alias           copy -> Copy-Item
Alias           cp -> Copy-Item
Alias           cpi -> Copy-Item
Alias           cpp -> Copy-ItemProperty
Alias           curl -> Invoke-WebRequest
Alias           cvpa -> Convert-Path
Alias           dbp -> Disable-PSBreakpoint
Alias           del -> Remove-Item
Alias           diff -> Compare-Object
Alias           dir -> Get-ChildItem
Alias           dnsn -> Disconnect-PSSession
Alias           ebp -> Enable-PSBreakpoint
Alias           echo -> Write-Output
Alias           epal -> Export-Alias
Alias           epcsv -> Export-Csv
Alias           epsn -> Export-PSSession
Alias           erase -> Remove-Item
Alias           etsn -> Enter-PSSession
Alias           exsn -> Exit-PSSession
Alias           fc -> Format-Custom
Alias           fhx -> Format-Hex                                  3.1.0.0    Microsoft.PowerShell.Utility
Alias           fimo -> Find-Module                                1.0.0.1    PowerShellGet
---------------------


