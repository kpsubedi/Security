[Setting Up A Powershell Testing Environment]

[[Script Execution Policy]]
- Which determines what types of scripts PowerShell can execute. For example, we can check the current setting for the execution policy as follows:
PS C:\> Get-ExecutionPolicy
Restricted

- The restricted blocks all scripts from running unless they are signed with a trusted certificate. 
- As the scripts in this book are unsigned, we'll change the execution policy to RemoteSigned. This execution policy allows us to run unsigned PowerShell scripts if they're created locally but will not allow us to execute unsigned scripts downloaded in a web browser or attached to emails. 

- Run the following command to set the execution policy: 
PS C:\> Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -Force
PS C:\> Get-ExecutionPolicy
RemoteSigned
- The above command changes the execution policy for the current user only, not the entire system. If you want to change it for all users, you'll need to start PowerShell as an administrator and then rerun the command, removing the Scope parameter. 
PS C:\> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Force

- If you're using the open source version of PowerShell or version 5.1 on Windows Server, then the default script execution policy is RemoteSigned and you donot have to change anything. Here are the commands to query PowerShell version 
PS C:\> GET-Host

Name             : ConsoleHost
Version          : 5.1.26100.2161
InstanceId       : ff2c5f33-f377-4199-87ec-09a191edfb00
UI               : System.Management.Automation.Internal.Host.InternalHostUserInterface
CurrentCulture   : en-US
CurrentUICulture : en-US
PrivateData      : Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy
DebuggerEnabled  : True
IsRunspacePushed : False
Runspace         : System.Management.Automation.Runspaces.LocalRunspace


PS C:\> GET-Host | Select-Object Version

Version
-------
5.1.26100.2161

PS C:\> $PSVersionTable

Name                           Value
----                           -----
PSVersion                      5.1.26100.2161
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.26100.2161
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1

- Now that we can run unsigned scripts, we can install the PowerShell module we'll be using for this book. 
- A PowerShell module is a package of scripts and .NET binaries that export PowerShell commands. Every installation of PowerShell comes preinstalled with several modules for tasks ranging from configuring your applications to setting up Windows Update. You can install a module manually by copying its files, but the easier approach is to use the PowerShell Gallery (https://www.powershellgallery.com), an online repository of modules.

[[Install A PowerShell Module]]
- To install a module from the PowerShell Gallery, we use PowerShell's Install-Module command. For this book, we'll need to install the NtObjectManager module, which we can do using the following command:

PS C:\> Install-Module NtObjectManager -Scope CurrentUser -Force

NuGet provider is required to continue
PowerShellGet requires NuGet provider version '2.8.5.201' or newer to interact with NuGet-based repositories. The
NuGet provider must be available in 'C:\Program Files (x86)\PackageManagement\ProviderAssemblies' or
'C:\<>\AppData\Local\PackageManagement\ProviderAssemblies'. You can also install the NuGet provider by
running 'Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force'. Do you want PowerShellGet to install
and import the NuGet provider now?
[Y] Yes  [N] No  [S] Suspend  [?] Help (default is "Y"):

Press "Y".

- If you have the module installed already, you can ensure that you have the latest version by using the Update-Module commands:

PS C:\> Update-Module NtObjectManager

- Once it's installed, you can load the module using the Import-Module command:

PS C:\> Import-Module NtObjectManager
PS C:\> New-NtObjectDescriptor
New-NtObjectDescriptor : The term 'New-NtObjectDescriptor' is not recognized as the name of a cmdlet, function,
script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is
correct and try again.
At line:1 char:1
+ New-NtObjectDescriptor
+ ~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (New-NtObjectDescriptor:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\> New-NtSecurityDescriptor

Owner DACL ACE Count SACL ACE Count Integrity Level
----- -------------- -------------- ---------------
NONE  NONE           NONE           NONE

[[An Overview of the PowerShell Language]]

[[[Understanding Types, Variables, and Expressions]]]

- PowerShell supports many different data types, from basic integers and strings to complex objects. The following shows some of the most common built-in types:
Type            .Net type                    Examples
int             System.Int32                142, 0x8E, 0216
long            System.Int64                142L, 0x8EL, 0216L
string          System.String                "Hello", 'World!'
double          System.Double                1.0, 1e10
bool            System.Boolean               $true, $false
array           System.Object[]              @(1, "ABC", $true)
hashtable       System.Collections.Hashtable    @{A=1; B="ABC"}

- To perform calculations on basic types, we can use well-known operators such as +, -, *, and /. These operators can be overloaded; for example, + is used for addition as well as for concatenating strings and arrays. 
- The following provides a list of common operators, with simple examples and their results.
Operator        Name                        Examples                        Results
+               Addition or concatenation   1 + 2, "Hello" + "World!"       3, "HelloWorld!"
-               Subtraction                 2 - 1                           1
*               Multiplication              2 * 4                           8
/               Division                    8 / 4                           2
%               Modulus                     6 % 4                           2
[]              Index                       @(3, 2, 1, 0)[1]                2
-f              String formatter            "0x{0:X} {1}" -f 42, 123        "0x2A 123"
-band           Bitwise AND                 0x1FF -band 0xFF                255
-bor            Bitwise OR                  0x100 -bor 0x20                 288
-bxor           Bitwise XOR                 0xCC -bxor 0xDD                 17
-bnot           Bitwise NOT                 -bnot 0xEE                      -239
-and            Boolean AND                 $true -and $false                $false
-or             Boolean OR                  $true -or $false                 $true
-not            Boolean NOT                 -not $ture                       $false
-eq             Equals                      "Hello" -eq "Hello"              $true
-ne             Not equals                  "Hello" -ne "Hello"              $false
-lt             Less than                    4 -lt 10                        $true
-gt             Greater than                 4 -gt 10                        $false

- You can assign values to variables using the assignment operator, =. E.g., $x = 45. A variable has an alphanumeric name prefixed with the $ character. For example, the following example shows how you can capture an array in a variable and use the indexing operator to look up a value. 
- PS> $var = 3, 2, 1, 0
- PS> $var[1] 
  2

- There are also some predefined variables we'll ise in the rest of this book. These variables are:
$null => Represents the NULL value, which indicates the absence of a value in comparisons 
$pwd => Contains the current working directory 
$pid => Contains the process ID of the shell 
$env => Accesses the process environment (for example, $env:WinDir to get the Windows directory)

- You can enumerate all variables using the Get-Variable command. 

- In the above data types section, you might have noticed that there were two string examples, one using double quotation marks and one using single quotation marks. 
- One difference between the two is that a double-quoted string support STRING INTERPOLATION, where you insert a variable name into the string as a placeholder and PowerShell includes its value in the result. 
- Example 
PS> $var = 42
PS> "The magic number is $var"
The magic number is 42

PS>'It is not $var'
It is not $var


